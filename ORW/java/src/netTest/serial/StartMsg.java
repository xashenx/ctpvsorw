/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'StartMsg'
 * message type.
 */

package netTest.serial;

public class StartMsg extends netTest.serial.SerializableMessage {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 7;

    /** Create a new StartMsg of size 12. */
    public StartMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new StartMsg of the given data_length. */
    public StartMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg with the given data_length
     * and base offset.
     */
    public StartMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg using the given byte array
     * as backing store.
     */
    public StartMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public StartMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public StartMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg embedded in the given message
     * at the given base offset.
     */
    public StartMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StartMsg embedded in the given message
     * at the given base offset and length.
     */
    public StartMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <StartMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqn=0x"+Long.toHexString(get_seqn())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nPackets=0x"+Long.toHexString(get_nPackets())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [interval=0x"+Long.toHexString(get_interval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [expSender=0x"+Long.toHexString(get_expSender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lplCheckInterval=0x"+Long.toHexString(get_lplCheckInterval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [channel=0x"+Long.toHexString(get_channel())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqn
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqn' is signed (false).
     */
    public static boolean isSigned_seqn() {
        return false;
    }

    /**
     * Return whether the field 'seqn' is an array (false).
     */
    public static boolean isArray_seqn() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqn'
     */
    public static int offset_seqn() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqn'
     */
    public static int offsetBits_seqn() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'seqn'
     */
    public int get_seqn() {
        return (int)getUIntBEElement(offsetBits_seqn(), 16);
    }

    /**
     * Set the value of the field 'seqn'
     */
    public void set_seqn(int value) {
        setUIntBEElement(offsetBits_seqn(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqn'
     */
    public static int size_seqn() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqn'
     */
    public static int sizeBits_seqn() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nPackets
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nPackets' is signed (false).
     */
    public static boolean isSigned_nPackets() {
        return false;
    }

    /**
     * Return whether the field 'nPackets' is an array (false).
     */
    public static boolean isArray_nPackets() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nPackets'
     */
    public static int offset_nPackets() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nPackets'
     */
    public static int offsetBits_nPackets() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'nPackets'
     */
    public int get_nPackets() {
        return (int)getUIntBEElement(offsetBits_nPackets(), 16);
    }

    /**
     * Set the value of the field 'nPackets'
     */
    public void set_nPackets(int value) {
        setUIntBEElement(offsetBits_nPackets(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nPackets'
     */
    public static int size_nPackets() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nPackets'
     */
    public static int sizeBits_nPackets() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: interval
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'interval' is signed (false).
     */
    public static boolean isSigned_interval() {
        return false;
    }

    /**
     * Return whether the field 'interval' is an array (false).
     */
    public static boolean isArray_interval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'interval'
     */
    public static int offset_interval() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'interval'
     */
    public static int offsetBits_interval() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'interval'
     */
    public int get_interval() {
        return (int)getUIntBEElement(offsetBits_interval(), 16);
    }

    /**
     * Set the value of the field 'interval'
     */
    public void set_interval(int value) {
        setUIntBEElement(offsetBits_interval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'interval'
     */
    public static int size_interval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'interval'
     */
    public static int sizeBits_interval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: expSender
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'expSender' is signed (false).
     */
    public static boolean isSigned_expSender() {
        return false;
    }

    /**
     * Return whether the field 'expSender' is an array (false).
     */
    public static boolean isArray_expSender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'expSender'
     */
    public static int offset_expSender() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'expSender'
     */
    public static int offsetBits_expSender() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'expSender'
     */
    public int get_expSender() {
        return (int)getUIntBEElement(offsetBits_expSender(), 16);
    }

    /**
     * Set the value of the field 'expSender'
     */
    public void set_expSender(int value) {
        setUIntBEElement(offsetBits_expSender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'expSender'
     */
    public static int size_expSender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'expSender'
     */
    public static int sizeBits_expSender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lplCheckInterval
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lplCheckInterval' is signed (false).
     */
    public static boolean isSigned_lplCheckInterval() {
        return false;
    }

    /**
     * Return whether the field 'lplCheckInterval' is an array (false).
     */
    public static boolean isArray_lplCheckInterval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lplCheckInterval'
     */
    public static int offset_lplCheckInterval() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lplCheckInterval'
     */
    public static int offsetBits_lplCheckInterval() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'lplCheckInterval'
     */
    public int get_lplCheckInterval() {
        return (int)getUIntBEElement(offsetBits_lplCheckInterval(), 16);
    }

    /**
     * Set the value of the field 'lplCheckInterval'
     */
    public void set_lplCheckInterval(int value) {
        setUIntBEElement(offsetBits_lplCheckInterval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lplCheckInterval'
     */
    public static int size_lplCheckInterval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lplCheckInterval'
     */
    public static int sizeBits_lplCheckInterval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: channel
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'channel' is signed (false).
     */
    public static boolean isSigned_channel() {
        return false;
    }

    /**
     * Return whether the field 'channel' is an array (false).
     */
    public static boolean isArray_channel() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'channel'
     */
    public static int offset_channel() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'channel'
     */
    public static int offsetBits_channel() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'channel'
     */
    public short get_channel() {
        return (short)getUIntBEElement(offsetBits_channel(), 8);
    }

    /**
     * Set the value of the field 'channel'
     */
    public void set_channel(short value) {
        setUIntBEElement(offsetBits_channel(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'channel'
     */
    public static int size_channel() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'channel'
     */
    public static int sizeBits_channel() {
        return 8;
    }

}
