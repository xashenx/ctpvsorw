/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DataMsg'
 * message type.
 */

package netTest.serial;

public class DataMsg extends netTest.serial.SerializableMessage {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 54;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 13;

    /** Create a new DataMsg of size 54. */
    public DataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DataMsg of the given data_length. */
    public DataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg with the given data_length
     * and base offset.
     */
    public DataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store.
     */
    public DataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DataMsg> \n";
      try {
        s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity=0x"+Long.toHexString(get_humidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltage=0x"+Long.toHexString(get_voltage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.node_addr=0x"+Long.toHexString(get_routing_data_node_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.seq_no=0x"+Long.toHexString(get_routing_data_seq_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.ack_received=0x"+Long.toHexString(get_routing_data_ack_received())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.beacons=0x"+Long.toHexString(get_routing_data_beacons())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.ack_failed=0x"+Long.toHexString(get_routing_data_ack_failed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.tx_queue_full=0x"+Long.toHexString(get_routing_data_tx_queue_full())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.dropped_duplicates=0x"+Long.toHexString(get_routing_data_dropped_duplicates())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents_seen=0x"+Long.toHexString(get_routing_data_parents_seen())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents_no=0x"+Long.toHexString(get_routing_data_parents_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.forwarded=0x"+Long.toHexString(get_routing_data_forwarded())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.dcIdle=0x"+Long.toHexString(get_routing_data_dcIdle())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.dcData=0x"+Long.toHexString(get_routing_data_dcData())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents.addr=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_routing_data_parents_addr(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents.etx=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_routing_data_parents_etx(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents.periods=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_routing_data_parents_periods(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_data.parents.subunits=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_routing_data_parents_subunits(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (false).
     */
    public static boolean isSigned_temperature() {
        return false;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'temperature'
     */
    public int get_temperature() {
        return (int)getUIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(int value) {
        setUIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity' is signed (false).
     */
    public static boolean isSigned_humidity() {
        return false;
    }

    /**
     * Return whether the field 'humidity' is an array (false).
     */
    public static boolean isArray_humidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity'
     */
    public static int offset_humidity() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity'
     */
    public static int offsetBits_humidity() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'humidity'
     */
    public int get_humidity() {
        return (int)getUIntBEElement(offsetBits_humidity(), 16);
    }

    /**
     * Set the value of the field 'humidity'
     */
    public void set_humidity(int value) {
        setUIntBEElement(offsetBits_humidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity'
     */
    public static int size_humidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity'
     */
    public static int sizeBits_humidity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltage
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'voltage' is signed (false).
     */
    public static boolean isSigned_voltage() {
        return false;
    }

    /**
     * Return whether the field 'voltage' is an array (false).
     */
    public static boolean isArray_voltage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'voltage'
     */
    public static int offset_voltage() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'voltage'
     */
    public static int offsetBits_voltage() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'voltage'
     */
    public int get_voltage() {
        return (int)getUIntBEElement(offsetBits_voltage(), 16);
    }

    /**
     * Set the value of the field 'voltage'
     */
    public void set_voltage(int value) {
        setUIntBEElement(offsetBits_voltage(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'voltage'
     */
    public static int size_voltage() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'voltage'
     */
    public static int sizeBits_voltage() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.node_addr
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.node_addr' is signed (false).
     */
    public static boolean isSigned_routing_data_node_addr() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.node_addr' is an array (false).
     */
    public static boolean isArray_routing_data_node_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.node_addr'
     */
    public static int offset_routing_data_node_addr() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.node_addr'
     */
    public static int offsetBits_routing_data_node_addr() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.node_addr'
     */
    public int get_routing_data_node_addr() {
        return (int)getUIntBEElement(offsetBits_routing_data_node_addr(), 16);
    }

    /**
     * Set the value of the field 'routing_data.node_addr'
     */
    public void set_routing_data_node_addr(int value) {
        setUIntBEElement(offsetBits_routing_data_node_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.node_addr'
     */
    public static int size_routing_data_node_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.node_addr'
     */
    public static int sizeBits_routing_data_node_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.seq_no
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.seq_no' is signed (false).
     */
    public static boolean isSigned_routing_data_seq_no() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.seq_no' is an array (false).
     */
    public static boolean isArray_routing_data_seq_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.seq_no'
     */
    public static int offset_routing_data_seq_no() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.seq_no'
     */
    public static int offsetBits_routing_data_seq_no() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.seq_no'
     */
    public int get_routing_data_seq_no() {
        return (int)getUIntBEElement(offsetBits_routing_data_seq_no(), 16);
    }

    /**
     * Set the value of the field 'routing_data.seq_no'
     */
    public void set_routing_data_seq_no(int value) {
        setUIntBEElement(offsetBits_routing_data_seq_no(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.seq_no'
     */
    public static int size_routing_data_seq_no() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.seq_no'
     */
    public static int sizeBits_routing_data_seq_no() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.ack_received
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.ack_received' is signed (false).
     */
    public static boolean isSigned_routing_data_ack_received() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.ack_received' is an array (false).
     */
    public static boolean isArray_routing_data_ack_received() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.ack_received'
     */
    public static int offset_routing_data_ack_received() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.ack_received'
     */
    public static int offsetBits_routing_data_ack_received() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.ack_received'
     */
    public int get_routing_data_ack_received() {
        return (int)getUIntBEElement(offsetBits_routing_data_ack_received(), 16);
    }

    /**
     * Set the value of the field 'routing_data.ack_received'
     */
    public void set_routing_data_ack_received(int value) {
        setUIntBEElement(offsetBits_routing_data_ack_received(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.ack_received'
     */
    public static int size_routing_data_ack_received() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.ack_received'
     */
    public static int sizeBits_routing_data_ack_received() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.beacons
    //   Field type: int
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.beacons' is signed (false).
     */
    public static boolean isSigned_routing_data_beacons() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.beacons' is an array (false).
     */
    public static boolean isArray_routing_data_beacons() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.beacons'
     */
    public static int offset_routing_data_beacons() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.beacons'
     */
    public static int offsetBits_routing_data_beacons() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.beacons'
     */
    public int get_routing_data_beacons() {
        return (int)getUIntBEElement(offsetBits_routing_data_beacons(), 16);
    }

    /**
     * Set the value of the field 'routing_data.beacons'
     */
    public void set_routing_data_beacons(int value) {
        setUIntBEElement(offsetBits_routing_data_beacons(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.beacons'
     */
    public static int size_routing_data_beacons() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.beacons'
     */
    public static int sizeBits_routing_data_beacons() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.ack_failed
    //   Field type: int
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.ack_failed' is signed (false).
     */
    public static boolean isSigned_routing_data_ack_failed() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.ack_failed' is an array (false).
     */
    public static boolean isArray_routing_data_ack_failed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.ack_failed'
     */
    public static int offset_routing_data_ack_failed() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.ack_failed'
     */
    public static int offsetBits_routing_data_ack_failed() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.ack_failed'
     */
    public int get_routing_data_ack_failed() {
        return (int)getUIntBEElement(offsetBits_routing_data_ack_failed(), 16);
    }

    /**
     * Set the value of the field 'routing_data.ack_failed'
     */
    public void set_routing_data_ack_failed(int value) {
        setUIntBEElement(offsetBits_routing_data_ack_failed(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.ack_failed'
     */
    public static int size_routing_data_ack_failed() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.ack_failed'
     */
    public static int sizeBits_routing_data_ack_failed() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.tx_queue_full
    //   Field type: int
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.tx_queue_full' is signed (false).
     */
    public static boolean isSigned_routing_data_tx_queue_full() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.tx_queue_full' is an array (false).
     */
    public static boolean isArray_routing_data_tx_queue_full() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.tx_queue_full'
     */
    public static int offset_routing_data_tx_queue_full() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.tx_queue_full'
     */
    public static int offsetBits_routing_data_tx_queue_full() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.tx_queue_full'
     */
    public int get_routing_data_tx_queue_full() {
        return (int)getUIntBEElement(offsetBits_routing_data_tx_queue_full(), 16);
    }

    /**
     * Set the value of the field 'routing_data.tx_queue_full'
     */
    public void set_routing_data_tx_queue_full(int value) {
        setUIntBEElement(offsetBits_routing_data_tx_queue_full(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.tx_queue_full'
     */
    public static int size_routing_data_tx_queue_full() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.tx_queue_full'
     */
    public static int sizeBits_routing_data_tx_queue_full() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.dropped_duplicates
    //   Field type: int
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.dropped_duplicates' is signed (false).
     */
    public static boolean isSigned_routing_data_dropped_duplicates() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.dropped_duplicates' is an array (false).
     */
    public static boolean isArray_routing_data_dropped_duplicates() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.dropped_duplicates'
     */
    public static int offset_routing_data_dropped_duplicates() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.dropped_duplicates'
     */
    public static int offsetBits_routing_data_dropped_duplicates() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.dropped_duplicates'
     */
    public int get_routing_data_dropped_duplicates() {
        return (int)getUIntBEElement(offsetBits_routing_data_dropped_duplicates(), 16);
    }

    /**
     * Set the value of the field 'routing_data.dropped_duplicates'
     */
    public void set_routing_data_dropped_duplicates(int value) {
        setUIntBEElement(offsetBits_routing_data_dropped_duplicates(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.dropped_duplicates'
     */
    public static int size_routing_data_dropped_duplicates() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.dropped_duplicates'
     */
    public static int sizeBits_routing_data_dropped_duplicates() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents_seen
    //   Field type: int
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents_seen' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_seen() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents_seen' is an array (false).
     */
    public static boolean isArray_routing_data_parents_seen() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents_seen'
     */
    public static int offset_routing_data_parents_seen() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents_seen'
     */
    public static int offsetBits_routing_data_parents_seen() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.parents_seen'
     */
    public int get_routing_data_parents_seen() {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_seen(), 16);
    }

    /**
     * Set the value of the field 'routing_data.parents_seen'
     */
    public void set_routing_data_parents_seen(int value) {
        setUIntBEElement(offsetBits_routing_data_parents_seen(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.parents_seen'
     */
    public static int size_routing_data_parents_seen() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.parents_seen'
     */
    public static int sizeBits_routing_data_parents_seen() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents_no
    //   Field type: int
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents_no' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_no() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents_no' is an array (false).
     */
    public static boolean isArray_routing_data_parents_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents_no'
     */
    public static int offset_routing_data_parents_no() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents_no'
     */
    public static int offsetBits_routing_data_parents_no() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.parents_no'
     */
    public int get_routing_data_parents_no() {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_no(), 16);
    }

    /**
     * Set the value of the field 'routing_data.parents_no'
     */
    public void set_routing_data_parents_no(int value) {
        setUIntBEElement(offsetBits_routing_data_parents_no(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.parents_no'
     */
    public static int size_routing_data_parents_no() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.parents_no'
     */
    public static int sizeBits_routing_data_parents_no() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.forwarded
    //   Field type: int
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.forwarded' is signed (false).
     */
    public static boolean isSigned_routing_data_forwarded() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.forwarded' is an array (false).
     */
    public static boolean isArray_routing_data_forwarded() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.forwarded'
     */
    public static int offset_routing_data_forwarded() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.forwarded'
     */
    public static int offsetBits_routing_data_forwarded() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.forwarded'
     */
    public int get_routing_data_forwarded() {
        return (int)getUIntBEElement(offsetBits_routing_data_forwarded(), 16);
    }

    /**
     * Set the value of the field 'routing_data.forwarded'
     */
    public void set_routing_data_forwarded(int value) {
        setUIntBEElement(offsetBits_routing_data_forwarded(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.forwarded'
     */
    public static int size_routing_data_forwarded() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.forwarded'
     */
    public static int sizeBits_routing_data_forwarded() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.dcIdle
    //   Field type: int
    //   Offset (bits): 208
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.dcIdle' is signed (false).
     */
    public static boolean isSigned_routing_data_dcIdle() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.dcIdle' is an array (false).
     */
    public static boolean isArray_routing_data_dcIdle() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.dcIdle'
     */
    public static int offset_routing_data_dcIdle() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.dcIdle'
     */
    public static int offsetBits_routing_data_dcIdle() {
        return 208;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.dcIdle'
     */
    public int get_routing_data_dcIdle() {
        return (int)getUIntBEElement(offsetBits_routing_data_dcIdle(), 16);
    }

    /**
     * Set the value of the field 'routing_data.dcIdle'
     */
    public void set_routing_data_dcIdle(int value) {
        setUIntBEElement(offsetBits_routing_data_dcIdle(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.dcIdle'
     */
    public static int size_routing_data_dcIdle() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.dcIdle'
     */
    public static int sizeBits_routing_data_dcIdle() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.dcData
    //   Field type: int
    //   Offset (bits): 224
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.dcData' is signed (false).
     */
    public static boolean isSigned_routing_data_dcData() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.dcData' is an array (false).
     */
    public static boolean isArray_routing_data_dcData() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.dcData'
     */
    public static int offset_routing_data_dcData() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.dcData'
     */
    public static int offsetBits_routing_data_dcData() {
        return 224;
    }

    /**
     * Return the value (as a int) of the field 'routing_data.dcData'
     */
    public int get_routing_data_dcData() {
        return (int)getUIntBEElement(offsetBits_routing_data_dcData(), 16);
    }

    /**
     * Set the value of the field 'routing_data.dcData'
     */
    public void set_routing_data_dcData(int value) {
        setUIntBEElement(offsetBits_routing_data_dcData(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_data.dcData'
     */
    public static int size_routing_data_dcData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_data.dcData'
     */
    public static int sizeBits_routing_data_dcData() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents.addr
    //   Field type: int[]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents.addr' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_addr() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents.addr' is an array (true).
     */
    public static boolean isArray_routing_data_parents_addr() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents.addr'
     */
    public static int offset_routing_data_parents_addr(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents.addr'
     */
    public static int offsetBits_routing_data_parents_addr(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return offset;
    }

    /**
     * Return the entire array 'routing_data.parents.addr' as a int[]
     */
    public int[] get_routing_data_parents_addr() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_routing_data_parents_addr(0); index0++) {
            tmp[index0] = getElement_routing_data_parents_addr(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'routing_data.parents.addr' from the given int[]
     */
    public void set_routing_data_parents_addr(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_routing_data_parents_addr(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'routing_data.parents.addr'
     */
    public int getElement_routing_data_parents_addr(int index1) {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_addr(index1), 16);
    }

    /**
     * Set an element of the array 'routing_data.parents.addr'
     */
    public void setElement_routing_data_parents_addr(int index1, int value) {
        setUIntBEElement(offsetBits_routing_data_parents_addr(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'routing_data.parents.addr'
     */
    public static int totalSize_routing_data_parents_addr() {
        return (192 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'routing_data.parents.addr'
     */
    public static int totalSizeBits_routing_data_parents_addr() {
        return 192;
    }

    /**
     * Return the size, in bytes, of each element of the array 'routing_data.parents.addr'
     */
    public static int elementSize_routing_data_parents_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'routing_data.parents.addr'
     */
    public static int elementSizeBits_routing_data_parents_addr() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'routing_data.parents.addr'
     */
    public static int numDimensions_routing_data_parents_addr() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.addr'
     */
    public static int numElements_routing_data_parents_addr() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.addr'
     * for the given dimension.
     */
    public static int numElements_routing_data_parents_addr(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents.etx
    //   Field type: int[]
    //   Offset (bits): 16
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents.etx' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_etx() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents.etx' is an array (true).
     */
    public static boolean isArray_routing_data_parents_etx() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents.etx'
     */
    public static int offset_routing_data_parents_etx(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents.etx'
     */
    public static int offsetBits_routing_data_parents_etx(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return offset;
    }

    /**
     * Return the entire array 'routing_data.parents.etx' as a int[]
     */
    public int[] get_routing_data_parents_etx() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_routing_data_parents_etx(0); index0++) {
            tmp[index0] = getElement_routing_data_parents_etx(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'routing_data.parents.etx' from the given int[]
     */
    public void set_routing_data_parents_etx(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_routing_data_parents_etx(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'routing_data.parents.etx'
     */
    public int getElement_routing_data_parents_etx(int index1) {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_etx(index1), 16);
    }

    /**
     * Set an element of the array 'routing_data.parents.etx'
     */
    public void setElement_routing_data_parents_etx(int index1, int value) {
        setUIntBEElement(offsetBits_routing_data_parents_etx(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'routing_data.parents.etx'
     */
    public static int totalSize_routing_data_parents_etx() {
        return (192 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'routing_data.parents.etx'
     */
    public static int totalSizeBits_routing_data_parents_etx() {
        return 192;
    }

    /**
     * Return the size, in bytes, of each element of the array 'routing_data.parents.etx'
     */
    public static int elementSize_routing_data_parents_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'routing_data.parents.etx'
     */
    public static int elementSizeBits_routing_data_parents_etx() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'routing_data.parents.etx'
     */
    public static int numDimensions_routing_data_parents_etx() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.etx'
     */
    public static int numElements_routing_data_parents_etx() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.etx'
     * for the given dimension.
     */
    public static int numElements_routing_data_parents_etx(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents.periods
    //   Field type: int[]
    //   Offset (bits): 32
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents.periods' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_periods() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents.periods' is an array (true).
     */
    public static boolean isArray_routing_data_parents_periods() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents.periods'
     */
    public static int offset_routing_data_parents_periods(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents.periods'
     */
    public static int offsetBits_routing_data_parents_periods(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return offset;
    }

    /**
     * Return the entire array 'routing_data.parents.periods' as a int[]
     */
    public int[] get_routing_data_parents_periods() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_routing_data_parents_periods(0); index0++) {
            tmp[index0] = getElement_routing_data_parents_periods(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'routing_data.parents.periods' from the given int[]
     */
    public void set_routing_data_parents_periods(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_routing_data_parents_periods(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'routing_data.parents.periods'
     */
    public int getElement_routing_data_parents_periods(int index1) {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_periods(index1), 16);
    }

    /**
     * Set an element of the array 'routing_data.parents.periods'
     */
    public void setElement_routing_data_parents_periods(int index1, int value) {
        setUIntBEElement(offsetBits_routing_data_parents_periods(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'routing_data.parents.periods'
     */
    public static int totalSize_routing_data_parents_periods() {
        return (192 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'routing_data.parents.periods'
     */
    public static int totalSizeBits_routing_data_parents_periods() {
        return 192;
    }

    /**
     * Return the size, in bytes, of each element of the array 'routing_data.parents.periods'
     */
    public static int elementSize_routing_data_parents_periods() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'routing_data.parents.periods'
     */
    public static int elementSizeBits_routing_data_parents_periods() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'routing_data.parents.periods'
     */
    public static int numDimensions_routing_data_parents_periods() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.periods'
     */
    public static int numElements_routing_data_parents_periods() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.periods'
     * for the given dimension.
     */
    public static int numElements_routing_data_parents_periods(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_data.parents.subunits
    //   Field type: int[]
    //   Offset (bits): 48
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_data.parents.subunits' is signed (false).
     */
    public static boolean isSigned_routing_data_parents_subunits() {
        return false;
    }

    /**
     * Return whether the field 'routing_data.parents.subunits' is an array (true).
     */
    public static boolean isArray_routing_data_parents_subunits() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_data.parents.subunits'
     */
    public static int offset_routing_data_parents_subunits(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_data.parents.subunits'
     */
    public static int offsetBits_routing_data_parents_subunits(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 240 + index1 * 64;
        return offset;
    }

    /**
     * Return the entire array 'routing_data.parents.subunits' as a int[]
     */
    public int[] get_routing_data_parents_subunits() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_routing_data_parents_subunits(0); index0++) {
            tmp[index0] = getElement_routing_data_parents_subunits(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'routing_data.parents.subunits' from the given int[]
     */
    public void set_routing_data_parents_subunits(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_routing_data_parents_subunits(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'routing_data.parents.subunits'
     */
    public int getElement_routing_data_parents_subunits(int index1) {
        return (int)getUIntBEElement(offsetBits_routing_data_parents_subunits(index1), 16);
    }

    /**
     * Set an element of the array 'routing_data.parents.subunits'
     */
    public void setElement_routing_data_parents_subunits(int index1, int value) {
        setUIntBEElement(offsetBits_routing_data_parents_subunits(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'routing_data.parents.subunits'
     */
    public static int totalSize_routing_data_parents_subunits() {
        return (192 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'routing_data.parents.subunits'
     */
    public static int totalSizeBits_routing_data_parents_subunits() {
        return 192;
    }

    /**
     * Return the size, in bytes, of each element of the array 'routing_data.parents.subunits'
     */
    public static int elementSize_routing_data_parents_subunits() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'routing_data.parents.subunits'
     */
    public static int elementSizeBits_routing_data_parents_subunits() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'routing_data.parents.subunits'
     */
    public static int numDimensions_routing_data_parents_subunits() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.subunits'
     */
    public static int numElements_routing_data_parents_subunits() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'routing_data.parents.subunits'
     * for the given dimension.
     */
    public static int numElements_routing_data_parents_subunits(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
