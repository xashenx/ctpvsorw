/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'StatsMsg'
 * message type.
 */

package netTest.serial;

public class StatsMsg extends netTest.serial.SerializableMessage {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 80;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 8;

    /** Create a new StatsMsg of size 80. */
    public StatsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new StatsMsg of the given data_length. */
    public StatsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg with the given data_length
     * and base offset.
     */
    public StatsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg using the given byte array
     * as backing store.
     */
    public StatsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public StatsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public StatsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg embedded in the given message
     * at the given base offset.
     */
    public StatsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatsMsg embedded in the given message
     * at the given base offset and length.
     */
    public StatsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <StatsMsg> \n";
      try {
        s += "  [experimentId=0x"+Long.toHexString(get_experimentId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqn=0x"+Long.toHexString(get_seqn())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [expSender=0x"+Long.toHexString(get_expSender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rx_packets=";
        for (int i = 0; i < 16; i++) {
          s += "0x"+Long.toHexString(getElement_rx_packets(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rx_rssi=";
        for (int i = 0; i < 16; i++) {
          s += "0x"+Long.toHexString(getElement_rx_rssi(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rx_lqi=";
        for (int i = 0; i < 16; i++) {
          s += "0x"+Long.toHexString(getElement_rx_lqi(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [avgTemperature=0x"+Long.toHexString(get_avgTemperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [avgHumidity=0x"+Long.toHexString(get_avgHumidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [initBattery=0x"+Long.toHexString(get_initBattery())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [endBattery=0x"+Long.toHexString(get_endBattery())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: experimentId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'experimentId' is signed (false).
     */
    public static boolean isSigned_experimentId() {
        return false;
    }

    /**
     * Return whether the field 'experimentId' is an array (false).
     */
    public static boolean isArray_experimentId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'experimentId'
     */
    public static int offset_experimentId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'experimentId'
     */
    public static int offsetBits_experimentId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'experimentId'
     */
    public int get_experimentId() {
        return (int)getUIntBEElement(offsetBits_experimentId(), 16);
    }

    /**
     * Set the value of the field 'experimentId'
     */
    public void set_experimentId(int value) {
        setUIntBEElement(offsetBits_experimentId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'experimentId'
     */
    public static int size_experimentId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'experimentId'
     */
    public static int sizeBits_experimentId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqn
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqn' is signed (false).
     */
    public static boolean isSigned_seqn() {
        return false;
    }

    /**
     * Return whether the field 'seqn' is an array (false).
     */
    public static boolean isArray_seqn() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqn'
     */
    public static int offset_seqn() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqn'
     */
    public static int offsetBits_seqn() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'seqn'
     */
    public int get_seqn() {
        return (int)getUIntBEElement(offsetBits_seqn(), 16);
    }

    /**
     * Set the value of the field 'seqn'
     */
    public void set_seqn(int value) {
        setUIntBEElement(offsetBits_seqn(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqn'
     */
    public static int size_seqn() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqn'
     */
    public static int sizeBits_seqn() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: expSender
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'expSender' is signed (false).
     */
    public static boolean isSigned_expSender() {
        return false;
    }

    /**
     * Return whether the field 'expSender' is an array (false).
     */
    public static boolean isArray_expSender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'expSender'
     */
    public static int offset_expSender() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'expSender'
     */
    public static int offsetBits_expSender() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'expSender'
     */
    public int get_expSender() {
        return (int)getUIntBEElement(offsetBits_expSender(), 16);
    }

    /**
     * Set the value of the field 'expSender'
     */
    public void set_expSender(int value) {
        setUIntBEElement(offsetBits_expSender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'expSender'
     */
    public static int size_expSender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'expSender'
     */
    public static int sizeBits_expSender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rx_packets
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rx_packets' is signed (false).
     */
    public static boolean isSigned_rx_packets() {
        return false;
    }

    /**
     * Return whether the field 'rx_packets' is an array (true).
     */
    public static boolean isArray_rx_packets() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'rx_packets'
     */
    public static int offset_rx_packets(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rx_packets'
     */
    public static int offsetBits_rx_packets(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'rx_packets' as a int[]
     */
    public int[] get_rx_packets() {
        int[] tmp = new int[16];
        for (int index0 = 0; index0 < numElements_rx_packets(0); index0++) {
            tmp[index0] = getElement_rx_packets(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'rx_packets' from the given int[]
     */
    public void set_rx_packets(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_rx_packets(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'rx_packets'
     */
    public int getElement_rx_packets(int index1) {
        return (int)getUIntBEElement(offsetBits_rx_packets(index1), 16);
    }

    /**
     * Set an element of the array 'rx_packets'
     */
    public void setElement_rx_packets(int index1, int value) {
        setUIntBEElement(offsetBits_rx_packets(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'rx_packets'
     */
    public static int totalSize_rx_packets() {
        return (256 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'rx_packets'
     */
    public static int totalSizeBits_rx_packets() {
        return 256;
    }

    /**
     * Return the size, in bytes, of each element of the array 'rx_packets'
     */
    public static int elementSize_rx_packets() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'rx_packets'
     */
    public static int elementSizeBits_rx_packets() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'rx_packets'
     */
    public static int numDimensions_rx_packets() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'rx_packets'
     */
    public static int numElements_rx_packets() {
        return 16;
    }

    /**
     * Return the number of elements in the array 'rx_packets'
     * for the given dimension.
     */
    public static int numElements_rx_packets(int dimension) {
      int array_dims[] = { 16,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rx_rssi
    //   Field type: short[], unsigned
    //   Offset (bits): 320
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rx_rssi' is signed (false).
     */
    public static boolean isSigned_rx_rssi() {
        return false;
    }

    /**
     * Return whether the field 'rx_rssi' is an array (true).
     */
    public static boolean isArray_rx_rssi() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'rx_rssi'
     */
    public static int offset_rx_rssi(int index1) {
        int offset = 320;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rx_rssi'
     */
    public static int offsetBits_rx_rssi(int index1) {
        int offset = 320;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'rx_rssi' as a short[]
     */
    public short[] get_rx_rssi() {
        short[] tmp = new short[16];
        for (int index0 = 0; index0 < numElements_rx_rssi(0); index0++) {
            tmp[index0] = getElement_rx_rssi(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'rx_rssi' from the given short[]
     */
    public void set_rx_rssi(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_rx_rssi(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'rx_rssi'
     */
    public short getElement_rx_rssi(int index1) {
        return (short)getUIntBEElement(offsetBits_rx_rssi(index1), 8);
    }

    /**
     * Set an element of the array 'rx_rssi'
     */
    public void setElement_rx_rssi(int index1, short value) {
        setUIntBEElement(offsetBits_rx_rssi(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'rx_rssi'
     */
    public static int totalSize_rx_rssi() {
        return (128 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'rx_rssi'
     */
    public static int totalSizeBits_rx_rssi() {
        return 128;
    }

    /**
     * Return the size, in bytes, of each element of the array 'rx_rssi'
     */
    public static int elementSize_rx_rssi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'rx_rssi'
     */
    public static int elementSizeBits_rx_rssi() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'rx_rssi'
     */
    public static int numDimensions_rx_rssi() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'rx_rssi'
     */
    public static int numElements_rx_rssi() {
        return 16;
    }

    /**
     * Return the number of elements in the array 'rx_rssi'
     * for the given dimension.
     */
    public static int numElements_rx_rssi(int dimension) {
      int array_dims[] = { 16,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'rx_rssi' with a String
     */
    public void setString_rx_rssi(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_rx_rssi(i, (short)s.charAt(i));
         }
         setElement_rx_rssi(i, (short)0); //null terminate
    }

    /**
     * Read the array 'rx_rssi' as a String
     */
    public String getString_rx_rssi() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,16)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_rx_rssi(i) == (char)0) break;
             carr[i] = (char)getElement_rx_rssi(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rx_lqi
    //   Field type: short[], unsigned
    //   Offset (bits): 448
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rx_lqi' is signed (false).
     */
    public static boolean isSigned_rx_lqi() {
        return false;
    }

    /**
     * Return whether the field 'rx_lqi' is an array (true).
     */
    public static boolean isArray_rx_lqi() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'rx_lqi'
     */
    public static int offset_rx_lqi(int index1) {
        int offset = 448;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rx_lqi'
     */
    public static int offsetBits_rx_lqi(int index1) {
        int offset = 448;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'rx_lqi' as a short[]
     */
    public short[] get_rx_lqi() {
        short[] tmp = new short[16];
        for (int index0 = 0; index0 < numElements_rx_lqi(0); index0++) {
            tmp[index0] = getElement_rx_lqi(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'rx_lqi' from the given short[]
     */
    public void set_rx_lqi(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_rx_lqi(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'rx_lqi'
     */
    public short getElement_rx_lqi(int index1) {
        return (short)getUIntBEElement(offsetBits_rx_lqi(index1), 8);
    }

    /**
     * Set an element of the array 'rx_lqi'
     */
    public void setElement_rx_lqi(int index1, short value) {
        setUIntBEElement(offsetBits_rx_lqi(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'rx_lqi'
     */
    public static int totalSize_rx_lqi() {
        return (128 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'rx_lqi'
     */
    public static int totalSizeBits_rx_lqi() {
        return 128;
    }

    /**
     * Return the size, in bytes, of each element of the array 'rx_lqi'
     */
    public static int elementSize_rx_lqi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'rx_lqi'
     */
    public static int elementSizeBits_rx_lqi() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'rx_lqi'
     */
    public static int numDimensions_rx_lqi() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'rx_lqi'
     */
    public static int numElements_rx_lqi() {
        return 16;
    }

    /**
     * Return the number of elements in the array 'rx_lqi'
     * for the given dimension.
     */
    public static int numElements_rx_lqi(int dimension) {
      int array_dims[] = { 16,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'rx_lqi' with a String
     */
    public void setString_rx_lqi(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_rx_lqi(i, (short)s.charAt(i));
         }
         setElement_rx_lqi(i, (short)0); //null terminate
    }

    /**
     * Read the array 'rx_lqi' as a String
     */
    public String getString_rx_lqi() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,16)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_rx_lqi(i) == (char)0) break;
             carr[i] = (char)getElement_rx_lqi(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: avgTemperature
    //   Field type: int, unsigned
    //   Offset (bits): 576
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'avgTemperature' is signed (false).
     */
    public static boolean isSigned_avgTemperature() {
        return false;
    }

    /**
     * Return whether the field 'avgTemperature' is an array (false).
     */
    public static boolean isArray_avgTemperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'avgTemperature'
     */
    public static int offset_avgTemperature() {
        return (576 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'avgTemperature'
     */
    public static int offsetBits_avgTemperature() {
        return 576;
    }

    /**
     * Return the value (as a int) of the field 'avgTemperature'
     */
    public int get_avgTemperature() {
        return (int)getUIntBEElement(offsetBits_avgTemperature(), 16);
    }

    /**
     * Set the value of the field 'avgTemperature'
     */
    public void set_avgTemperature(int value) {
        setUIntBEElement(offsetBits_avgTemperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'avgTemperature'
     */
    public static int size_avgTemperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'avgTemperature'
     */
    public static int sizeBits_avgTemperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: avgHumidity
    //   Field type: int, unsigned
    //   Offset (bits): 592
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'avgHumidity' is signed (false).
     */
    public static boolean isSigned_avgHumidity() {
        return false;
    }

    /**
     * Return whether the field 'avgHumidity' is an array (false).
     */
    public static boolean isArray_avgHumidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'avgHumidity'
     */
    public static int offset_avgHumidity() {
        return (592 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'avgHumidity'
     */
    public static int offsetBits_avgHumidity() {
        return 592;
    }

    /**
     * Return the value (as a int) of the field 'avgHumidity'
     */
    public int get_avgHumidity() {
        return (int)getUIntBEElement(offsetBits_avgHumidity(), 16);
    }

    /**
     * Set the value of the field 'avgHumidity'
     */
    public void set_avgHumidity(int value) {
        setUIntBEElement(offsetBits_avgHumidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'avgHumidity'
     */
    public static int size_avgHumidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'avgHumidity'
     */
    public static int sizeBits_avgHumidity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: initBattery
    //   Field type: int, unsigned
    //   Offset (bits): 608
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'initBattery' is signed (false).
     */
    public static boolean isSigned_initBattery() {
        return false;
    }

    /**
     * Return whether the field 'initBattery' is an array (false).
     */
    public static boolean isArray_initBattery() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'initBattery'
     */
    public static int offset_initBattery() {
        return (608 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'initBattery'
     */
    public static int offsetBits_initBattery() {
        return 608;
    }

    /**
     * Return the value (as a int) of the field 'initBattery'
     */
    public int get_initBattery() {
        return (int)getUIntBEElement(offsetBits_initBattery(), 16);
    }

    /**
     * Set the value of the field 'initBattery'
     */
    public void set_initBattery(int value) {
        setUIntBEElement(offsetBits_initBattery(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'initBattery'
     */
    public static int size_initBattery() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'initBattery'
     */
    public static int sizeBits_initBattery() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: endBattery
    //   Field type: int, unsigned
    //   Offset (bits): 624
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'endBattery' is signed (false).
     */
    public static boolean isSigned_endBattery() {
        return false;
    }

    /**
     * Return whether the field 'endBattery' is an array (false).
     */
    public static boolean isArray_endBattery() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'endBattery'
     */
    public static int offset_endBattery() {
        return (624 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'endBattery'
     */
    public static int offsetBits_endBattery() {
        return 624;
    }

    /**
     * Return the value (as a int) of the field 'endBattery'
     */
    public int get_endBattery() {
        return (int)getUIntBEElement(offsetBits_endBattery(), 16);
    }

    /**
     * Set the value of the field 'endBattery'
     */
    public void set_endBattery(int value) {
        setUIntBEElement(offsetBits_endBattery(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'endBattery'
     */
    public static int size_endBattery() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'endBattery'
     */
    public static int sizeBits_endBattery() {
        return 16;
    }

}
