/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ConfigMsg'
 * message type.
 */

package netTest.serial;

public class ConfigMsg extends netTest.serial.SerializableMessage {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 14;

    /** Create a new ConfigMsg of size 14. */
    public ConfigMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ConfigMsg of the given data_length. */
    public ConfigMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg with the given data_length
     * and base offset.
     */
    public ConfigMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg using the given byte array
     * as backing store.
     */
    public ConfigMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ConfigMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ConfigMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg embedded in the given message
     * at the given base offset.
     */
    public ConfigMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ConfigMsg embedded in the given message
     * at the given base offset and length.
     */
    public ConfigMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ConfigMsg> \n";
      try {
        s += "  [seq_no=0x"+Long.toHexString(get_seq_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [app_period=0x"+Long.toHexString(get_app_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [wait_period=0x"+Long.toHexString(get_wait_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [routing_boot_period=0x"+Long.toHexString(get_routing_boot_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [run_period=0x"+Long.toHexString(get_run_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [stop_period=0x"+Long.toHexString(get_stop_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [power=0x"+Long.toHexString(get_power())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [randomize_start=0x"+Long.toHexString(get_randomize_start())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq_no
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq_no' is signed (true).
     */
    public static boolean isSigned_seq_no() {
        return true;
    }

    /**
     * Return whether the field 'seq_no' is an array (false).
     */
    public static boolean isArray_seq_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq_no'
     */
    public static int offset_seq_no() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq_no'
     */
    public static int offsetBits_seq_no() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'seq_no'
     */
    public int get_seq_no() {
        return (int)getUIntBEElement(offsetBits_seq_no(), 16);
    }

    /**
     * Set the value of the field 'seq_no'
     */
    public void set_seq_no(int value) {
        setUIntBEElement(offsetBits_seq_no(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq_no'
     */
    public static int size_seq_no() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq_no'
     */
    public static int sizeBits_seq_no() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: app_period
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'app_period' is signed (true).
     */
    public static boolean isSigned_app_period() {
        return true;
    }

    /**
     * Return whether the field 'app_period' is an array (false).
     */
    public static boolean isArray_app_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'app_period'
     */
    public static int offset_app_period() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'app_period'
     */
    public static int offsetBits_app_period() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'app_period'
     */
    public int get_app_period() {
        return (int)getUIntBEElement(offsetBits_app_period(), 16);
    }

    /**
     * Set the value of the field 'app_period'
     */
    public void set_app_period(int value) {
        setUIntBEElement(offsetBits_app_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'app_period'
     */
    public static int size_app_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'app_period'
     */
    public static int sizeBits_app_period() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: wait_period
    //   Field type: int, signed
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'wait_period' is signed (true).
     */
    public static boolean isSigned_wait_period() {
        return true;
    }

    /**
     * Return whether the field 'wait_period' is an array (false).
     */
    public static boolean isArray_wait_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'wait_period'
     */
    public static int offset_wait_period() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'wait_period'
     */
    public static int offsetBits_wait_period() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'wait_period'
     */
    public int get_wait_period() {
        return (int)getUIntBEElement(offsetBits_wait_period(), 16);
    }

    /**
     * Set the value of the field 'wait_period'
     */
    public void set_wait_period(int value) {
        setUIntBEElement(offsetBits_wait_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'wait_period'
     */
    public static int size_wait_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'wait_period'
     */
    public static int sizeBits_wait_period() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: routing_boot_period
    //   Field type: int, signed
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'routing_boot_period' is signed (true).
     */
    public static boolean isSigned_routing_boot_period() {
        return true;
    }

    /**
     * Return whether the field 'routing_boot_period' is an array (false).
     */
    public static boolean isArray_routing_boot_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'routing_boot_period'
     */
    public static int offset_routing_boot_period() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'routing_boot_period'
     */
    public static int offsetBits_routing_boot_period() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'routing_boot_period'
     */
    public int get_routing_boot_period() {
        return (int)getUIntBEElement(offsetBits_routing_boot_period(), 16);
    }

    /**
     * Set the value of the field 'routing_boot_period'
     */
    public void set_routing_boot_period(int value) {
        setUIntBEElement(offsetBits_routing_boot_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'routing_boot_period'
     */
    public static int size_routing_boot_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'routing_boot_period'
     */
    public static int sizeBits_routing_boot_period() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: run_period
    //   Field type: int, signed
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'run_period' is signed (true).
     */
    public static boolean isSigned_run_period() {
        return true;
    }

    /**
     * Return whether the field 'run_period' is an array (false).
     */
    public static boolean isArray_run_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'run_period'
     */
    public static int offset_run_period() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'run_period'
     */
    public static int offsetBits_run_period() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'run_period'
     */
    public int get_run_period() {
        return (int)getUIntBEElement(offsetBits_run_period(), 16);
    }

    /**
     * Set the value of the field 'run_period'
     */
    public void set_run_period(int value) {
        setUIntBEElement(offsetBits_run_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'run_period'
     */
    public static int size_run_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'run_period'
     */
    public static int sizeBits_run_period() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: stop_period
    //   Field type: int, signed
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'stop_period' is signed (true).
     */
    public static boolean isSigned_stop_period() {
        return true;
    }

    /**
     * Return whether the field 'stop_period' is an array (false).
     */
    public static boolean isArray_stop_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'stop_period'
     */
    public static int offset_stop_period() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'stop_period'
     */
    public static int offsetBits_stop_period() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'stop_period'
     */
    public int get_stop_period() {
        return (int)getUIntBEElement(offsetBits_stop_period(), 16);
    }

    /**
     * Set the value of the field 'stop_period'
     */
    public void set_stop_period(int value) {
        setUIntBEElement(offsetBits_stop_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'stop_period'
     */
    public static int size_stop_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'stop_period'
     */
    public static int sizeBits_stop_period() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: power
    //   Field type: short, signed
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'power' is signed (true).
     */
    public static boolean isSigned_power() {
        return true;
    }

    /**
     * Return whether the field 'power' is an array (false).
     */
    public static boolean isArray_power() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'power'
     */
    public static int offset_power() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'power'
     */
    public static int offsetBits_power() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'power'
     */
    public short get_power() {
        return (short)getUIntBEElement(offsetBits_power(), 8);
    }

    /**
     * Set the value of the field 'power'
     */
    public void set_power(short value) {
        setUIntBEElement(offsetBits_power(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'power'
     */
    public static int size_power() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'power'
     */
    public static int sizeBits_power() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: randomize_start
    //   Field type: byte, signed
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'randomize_start' is signed (true).
     */
    public static boolean isSigned_randomize_start() {
        return true;
    }

    /**
     * Return whether the field 'randomize_start' is an array (false).
     */
    public static boolean isArray_randomize_start() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'randomize_start'
     */
    public static int offset_randomize_start() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'randomize_start'
     */
    public static int offsetBits_randomize_start() {
        return 104;
    }

    /**
     * Return the value (as a byte) of the field 'randomize_start'
     */
    public byte get_randomize_start() {
        return (byte)getSIntBEElement(offsetBits_randomize_start(), 8);
    }

    /**
     * Set the value of the field 'randomize_start'
     */
    public void set_randomize_start(byte value) {
        setSIntBEElement(offsetBits_randomize_start(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'randomize_start'
     */
    public static int size_randomize_start() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'randomize_start'
     */
    public static int sizeBits_randomize_start() {
        return 8;
    }

}
