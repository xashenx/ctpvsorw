--- CtpForwardingEngineP.nc.old	2008-11-26 00:23:05.000000000 +0100
+++ CtpForwardingEngineP.nc	2008-11-26 00:13:50.000000000 +0100
@@ -138,6 +138,9 @@
     interface CollectionPacket;
     interface CtpPacket;
     interface CtpCongestion;
+#ifdef CTP_CLEAR
+    interface CtpClear;
+#endif
   }
   uses {
     interface AMSend as SubSend;
@@ -166,6 +169,13 @@
     interface AMPacket;
     interface CollectionDebug;
     interface Leds;
+#ifdef LPL_COEXISTENCE
+    interface LowPowerListening;
+#endif
+#ifdef CTP_RADIO_SETTINGS
+    interface CC2420Packet;
+    interface CtpRadioSettings;
+#endif
   }
 }
 implementation {
@@ -244,6 +254,30 @@
     return SUCCESS;
   }
 
+#ifdef CTP_CLEAR
+  command error_t CtpClear.clear(){
+    int i;
+    while (! call SendQueue.empty())
+      call SendQueue.dequeue();
+    call RetxmitTimer.stop();
+    call CongestionTimer.stop();
+    clientCongested = FALSE;
+    parentCongested = FALSE;
+    running = FALSE;
+    ackPending = FALSE;
+    sending = FALSE;
+    for (i = 0; i < CLIENT_COUNT; i++) {
+      clientPtrs[i] = clientEntries + i;
+      dbg("Forwarder", "clientPtrs[%hhu] = %p\n", i, clientPtrs[i]);
+    }
+    congestionThreshold = (call SendQueue.maxSize()) >> 1;
+    loopbackMsgPtr = &loopbackMsg;
+    lastParent = call AMPacket.address();
+    seqno = 0;
+    return SUCCESS;
+  }
+#endif
+
   command error_t StdControl.start() {
     running = TRUE;
     return SUCCESS;
@@ -481,6 +515,13 @@
       else
         call CtpPacket.clearOption(qe->msg, CTP_OPT_ECN);
       
+#ifdef LPL_COEXISTENCE
+        call LowPowerListening.setRxSleepInterval(qe->msg, 0);
+#endif
+
+#ifdef CTP_RADIO_SETTINGS
+      call CC2420Packet.setPower(qe->msg, call CtpRadioSettings.getPower());
+#endif
       subsendResult = call SubSend.send(dest, qe->msg, payloadLen);
       if (subsendResult == SUCCESS) {
         // Successfully submitted to the data-link layer.
